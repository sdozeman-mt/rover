/**
 * Sets a media query for the specified breakpoint
 *
 * Accepts:
 * - $media-query: {String} Breakpoint variable (list found in variables.scss)
 *
 * Usage:
 * .selector {
 *   @include media-query($medium-up) {
 *     color: red;
 *   }
 * }
 */
// @mixin media-query($media-query) {
//   $breakpoint-found: false;

//   @each $breakpoint in $breakpoints {
//     $name: nth($breakpoint, 1);
//     $declaration: nth($breakpoint, 2);

//     @if $media-query == $name and $declaration {
//       $breakpoint-found: true;

//       // @ts-ignore
//       @media only screen and #{$declaration} {
//         @content;
//       }
//     }
//   }
// }

/**
 * Outputs list of transition properties
 *
 * Accepts:
 * - $transitions: {String} List of transition properties to set
 *
 * Usage:
 * .selector {
 *   @include transition(width, height 0.5s ease-in);
 * }
 */
@mixin transition($transitions...) {
  $output: ();

  @each $transition in $transitions {
    $output: append($output, get-transition-properties($transition), comma);
  }
  transition: $output;
}

/**
 * Forces an element to self-clear its children
 *
 * Usage:
 * .selector {
 *   @include clearfix;
 * }
 */
@mixin clearfix() {
  &::after {
    content: '';
    display: table;
    clear: both;
  }

  // stylelint-disable-next-line
  *zoom: 1;
}


/**
 * Hide element but make it accessible to screen readers
 *
 * Usage:
 * .selector {
 *   @include visually-hidden;
 * }
 */
@mixin visually-hidden() {
  // stylelint-disable-next-line
  position: absolute !important;
  overflow: hidden;
  width: 1px;
  height: 1px;
  margin: -1px;
  padding: 0;
  border: 0;
  clip: rect(0 0 0 0);
}


/**
 * Reverse the properties applied by @mixin visually-hidden
 *
 * Accepts:
 * - $position: {String} Positioning method for element
 *
 * Usage:
 * .selector {
 *   @include visually-shown(relative);
 * }
 */
@mixin visually-shown($position: inherit) {
  // stylelint-disable-next-line
  position: $position !important;
  overflow: auto;
  width: auto;
  height: auto;
  margin: 0;
  clip: auto;
}



// Media Query Mixin
// Use to create a breakpoint, ideally using predefined breakpoint variables
// For each project, you can create additional breakpoints if required
@mixin breakpoint($media-query) {
  @media only screen and (max-width: $media-query) {
      @content;
  }
}

// Make sure you are using a variable for this breakpoint
@mixin breakpoint-min($media-query) {
  @media only screen and (min-width: $media-query + 1px) {
      @content;
  }
}

@mixin breakpoint-between($min, $max) {
  @media only screen and (min-width: $min + 1px) and (max-width: $max) {
      @content;
  }
}

// Hides text in an element by squishing the text into oblivion. 
// Use this if you need to hide text contained in an inline element but still have it read by a screen reader.
@mixin squish-text {
  font: 0/0 serif;
  text-shadow: none;
  color: transparent;
}

// Hide elements from all users.//
// Used for elements which should not be immediately displayed to any user. An
// example would be a collapsible fieldset that will be expanded with a click
// from a user. The effect of this class can be toggled with the jQuery show()
// and hide() functions.
@mixin element-hidden {
  display: none;
}



// Removing default list styling
@mixin plain-list( $style: inherit, $display: inherit, $padding: inherit, $margin: inherit) {
  margin: $margin;
  padding: $padding;
  list-style: $style;

    li { display: $display; }
}



// Limits the text width of an element, good for
// wrapping text before it reaches the container edges.
// Use auto for $margin to center blocks.
@mixin limit-width($width, $margin) {
  width: 100%;
  max-width: $width;
  margin-left: $margin;
  margin-right: $margin;
}


// Fancy or Plain links
@mixin beautify-link($default: inherit, $color: inherit) {
  color: $default;
  text-decoration: none;
  transition: color $transition-duration $transition-timing;
    svg path { 
      fill: $default;
      transition: fill $transition-duration $transition-timing; 
    }

    &:hover {
      color: $color;
      text-decoration: none;

      svg { 
        path { fill: $color; }
      }
    }
}
@mixin uglify-link($color: inherit) {
  transition: none;

    &:hover {
      color: $color;
      text-decoration: underline;
    }
}



// Spacing and Margins
@mixin margin-above($proportion: 1) {
  margin-top: $base-spacing-unit * $proportion;
}

// Add a uniform bottom spacing to an element, same as spacing under paragraphs, list elements, etc
@mixin margin-trailer($proportion: 1) {
  margin-bottom: $base-spacing-unit * $proportion;
}

@mixin padding-trailer($proportion: 1) {
  padding-bottom: $base-spacing-unit * $proportion;
}

// Creating a fancy block we can re-use for consistently
// styled elements, arguments are:
// color (trailer line) and position (text alignment)
@mixin fancy-block($color, $position) {
  position: relative;
  text-align: $position;
  padding-bottom: ($base-spacing-unit) + ($base-spacing-unit * .1);

  &:after {
    content: "";
    left: 50%;
    bottom: 0;
    width: 55px;
    display: block;
    background: $color;
    position: absolute;
    transform: translateX(-50%);
    height: $base-spacing-unit * .1;
  }
}

// Creating a fancy hover link used for block elements
// Example: <a><img class="image" /> Click me</a>
// Also works with background-image if the 
// Div containing the background has the class '.image'
@mixin fancy-hover($bg, $opacity) {
  background: $bg;

    .image {
      opacity: 1;
      transition: $transition-default;
    }

    &:hover {
      .image { opacity: $opacity; }
    }
}

// Mixing to hide text from screen but still
// allow screen readers to see it
@mixin hide-text(){
  width: 0;
  height: 0;
  display: block;
  overflow: hidden;
  text-indent: 101%;
  white-space: nowrap;
}

// Mixin to handle background images
// Acepts: size (cover), align-x (top), align-y (left)
@mixin background-img($size: cover, $alignx: center, $aligny: center, $repeat: no-repeat) {
  background-size: $size;
  background-repeat: $repeat;
  background-position: $alignx $aligny;
}

// Preserve / Set aspect ratios on images
// https://css-tricks.com/snippets/sass/maintain-aspect-ratio-mixin/
@mixin aspect-ratio($width, $height) {
  position: relative;
    &:before {
      content: "";
      width: 100%;
      display: block;
      padding-top: ($height / $width) * 100%;
    }
    > image {
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      position: absolute;
    }
}