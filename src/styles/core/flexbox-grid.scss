/*
  Flexbox Grid

  - Grid based off of http://flexboxgrid.com/ with customized edits
  - Optional default, thin and wide gutter options for each breakpoint size
  - Use gutter-lg-thin or gutter-lg-wide on the `.flex-grid` element for modified gutter size
  - Use gutter-md-default, gutter-md-thin, or gutter-md-wide on the `.flex-grid` element to change gutter depending on breakpoints

  - Markup:
  <div class="grid">
    <div class="grid__item sm-12 lg-6">
      <p>Content</p>
    </div>
  </div>

  - Considerations:
    Flexbox doesn't always play nicely in IE11, Edge, 
    any padding on a flex-element child (e.g. grid__item)
    will cause the element to display improperly. 

    Make sure to include a wrapper element directly inside
    of the grid__item element if you want to add padding.
*/

/* ================================================= */
/* Helpers - Variables, Mixins, Extenders, Functions */
// Variables
$grid-columns: 12;
$gutter-norm: $base-spacing-unit; //40px gutter - assuming base unit is 20px
$gutter-thin: $base-spacing-unit / 2; //20px gutter - assuming base unit is 20px
$gutter-wide: $base-spacing-unit * 1.5; //60px gutter - assuming base unit is 20px
$breakpoints: ( md: $bp-lg, xm: $bp-md, sm: $bp-sm, xs: $bp-xs );


// Extenders
// - Base Styles
%flex-grid {
  display: flex;
  flex: 0 1 auto;
  flex-wrap: wrap;
  flex-direction: row;
}

// Mixins
// - Gutters
@mixin define-gutters($spacing) {
  margin-left: -$spacing;
  margin-right: -$spacing;
  .grid__item {
    padding-left: $spacing;
    padding-right: $spacing;
  }
}

@mixin define-gutter-bpclasses($key) {
  &.gutter-#{$key}-default { @include define-gutters($gutter-norm); }
  &.gutter-#{$key}-thin    { @include define-gutters($gutter-thin); }
  &.gutter-#{$key}-wide    { @include define-gutters($gutter-wide); }
}

@mixin define-justify($key) {
  &.start-#{$key}   { justify-content: flex-start; }
  &.end-#{$key}     { justify-content: flex-end; }
  &.center-#{$key}  { justify-content: center; }
  &.around-#{$key}  { justify-content: space-around; }
  &.between-#{$key} { justify-content: space-between; }
}

@mixin define-alignment($key) {
  &.top-#{$key}     { align-items: flex-start; }
  &.middle-#{$key}  { align-items: center; }
  &.bottom-#{$key}  { align-items: flex-end; }
}

@mixin define-order($key) {
  &.first-#{$key}    { order: 1; }
  &.last-#{$key}     { order: 2; }
}


/* ================================================= */
/* Base grid styles */
.flex-grid {
  // Base styles, used for all breakpoints
  // NOTE: IE will not honor a flex items 100% width without declaring it.
  @extend %flex-grid;
  @include define-justify('lg');
  @include define-alignment('lg');
  @include define-gutters($gutter-norm);
  @include define-gutter-bpclasses('lg'); 

  &.grid--reverse { flex-direction: row-reverse; }
  &.grid--flush { @include define-gutters(0); }

  .grid__item { 
    flex: 0 0 auto; 
    @include define-order('lg');
  }
}

// Functions
// - Generate default (desktop) columns
.grid__item {
  @for $i from 1 through $grid-columns {
    &.lg-#{$i} { width: percentage($i / $grid-columns); };
  };
  @for $i from 0 through $grid-columns {
    &.lg-offset-#{$i} { margin-left: percentage($i / $grid-columns); };
  };
}


// - Generate scoped columns for other breakpoints
@each $key, $value in $breakpoints {
  @if $value {
    @include breakpoint(#{$value}) {
      .flex-grid {  
        @include define-justify(#{$key}); 
        @include define-alignment(#{$key});
        @include define-gutter-bpclasses(#{$key}); 
      }

      .grid__item { 
        @include define-order(#{$key});
        @for $i from 1 through $grid-columns {
          &.#{$key}-#{$i} { width: percentage($i / $grid-columns); };
        };
        @for $i from 0 through $grid-columns {
          &.#{$key}-offset-#{$i} { margin-left: percentage($i / $grid-columns); };
        };
      }
    }
  }
}